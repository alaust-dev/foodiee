// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all recipes
	// (GET /recipes)
	GetRecipes(c *gin.Context)
	// Create a recipe
	// (POST /recipes)
	PostRecipes(c *gin.Context)
	// Get recipe by id
	// (GET /recipes/{id})
	GetRecipesId(c *gin.Context, id string)
	// Deletes all items from the shopping list.
	// (DELETE /shopping-list/{user-id})
	DeleteShoppingListUserId(c *gin.Context, userId string)
	// Returns the shopping list
	// (GET /shopping-list/{user-id})
	GetShoppingListUserId(c *gin.Context, userId string)
	// Adds an item to the shopping list
	// (PUT /shopping-list/{user-id})
	PutShoppingListUserId(c *gin.Context, userId string)
	// Returns all users
	// (GET /users)
	GetUsers(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRecipes operation middleware
func (siw *ServerInterfaceWrapper) GetRecipes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecipes(c)
}

// PostRecipes operation middleware
func (siw *ServerInterfaceWrapper) PostRecipes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRecipes(c)
}

// GetRecipesId operation middleware
func (siw *ServerInterfaceWrapper) GetRecipesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecipesId(c, id)
}

// DeleteShoppingListUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteShoppingListUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user-id", c.Param("user-id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user-id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteShoppingListUserId(c, userId)
}

// GetShoppingListUserId operation middleware
func (siw *ServerInterfaceWrapper) GetShoppingListUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user-id", c.Param("user-id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user-id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetShoppingListUserId(c, userId)
}

// PutShoppingListUserId operation middleware
func (siw *ServerInterfaceWrapper) PutShoppingListUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user-id", c.Param("user-id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user-id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutShoppingListUserId(c, userId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/recipes", wrapper.GetRecipes)
	router.POST(options.BaseURL+"/recipes", wrapper.PostRecipes)
	router.GET(options.BaseURL+"/recipes/:id", wrapper.GetRecipesId)
	router.DELETE(options.BaseURL+"/shopping-list/:user-id", wrapper.DeleteShoppingListUserId)
	router.GET(options.BaseURL+"/shopping-list/:user-id", wrapper.GetShoppingListUserId)
	router.PUT(options.BaseURL+"/shopping-list/:user-id", wrapper.PutShoppingListUserId)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
}
